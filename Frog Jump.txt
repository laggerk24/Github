//https://www.codingninjas.com/studio/problems/frog-jump_3621012

#include <bits/stdc++.h> 
int frogJumpUtil(int index, vector<int> &heights, int n, vector<int> &dp){
    if(index == n-1){
        return 0;
    }
    if(dp[index] != -1) return dp[index];
    int firstJump = frogJumpUtil(index+1,heights,n,dp) + abs(heights[index] - heights[index+1]);
    int secondJump = INT_MAX;
    if(index < n-2)
        secondJump = frogJumpUtil(index+2,heights,n,dp) + abs(heights[index] - heights[index+2]);
    return dp[index] = min(firstJump,secondJump);
}

int frogJumpUtil2(int index, vector<int> &heights, vector<int> &dp){
    if(index==0) return 0;
    if(dp[index] != -1) return dp[index];

    int firstJump = frogJumpUtil2(index-1,heights,dp) + abs(heights[index] - heights[index-1]);
    int secondJump = INT_MAX;
    if(index>1)
        secondJump = frogJumpUtil2(index-2,heights,dp) + abs(heights[index] - heights[index-2]);
    return dp[index] = min(firstJump,secondJump);
}

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n,-1);
    return frogJumpUtil2(n-1, heights,dp);
    // return frogJumpUtil(0,heights,n,dp);
}


https://leetcode.com/problems/minimum-path-sum/

class Solution {
public:
    long long minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) dp[i][j] = grid[i][j];
                else{
                    int top = INT_MAX;
                    int left = INT_MAX;
                    if(i!=0) top = grid[i][j]+dp[i-1][j];
                    if(j!=0) left = grid[i][j]+dp[i][j-1];
                    dp[i][j] = min(top,left);
                }
            }
        }
        return dp[m-1][n-1];
    }
};