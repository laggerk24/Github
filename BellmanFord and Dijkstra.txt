class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        
         for(int i=1; i<n; i++){
            for(auto edge: times){
                int u = edge[0];
                int v = edge[1];
                int w = edge[2];
                
                if(dist[u]!=INT_MAX and dist[u] + w < dist[v])
                    dist[v] = dist[u] + w;
            }
         }
        int res = -1;
        for(int i=1; i<=n; i++){
            res = max(res, dist[i]);
        }
        return res == INT_MAX ? -1 : res;
    }
};


// Solution 2 - Dijkstra Algo - Priority Queue
// Time Complexity - O(V + ElogV)

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> graph(n+1, vector<pair<int,int>>());

        for(auto time : times)
            graph[time[0]].push_back({time[1], time[2]});

        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;

        pq.push({0, k});

        while(!pq.empty()) {
            int node = pq.top().second;
            int nodedist = pq.top().first;
            pq.pop();

            for(auto neighbor : graph[node]) {
                int adjnode = neighbor.first;
                int adjnodedist = neighbor.second;

                if(dist[adjnode] > nodedist + adjnodedist) {
                    dist[adjnode] = nodedist + adjnodedist;
                    pq.push({dist[adjnode], adjnode});
                }
            }
        }

        int res = -1;
        for(int i = 1; i<=n; i++) {
            res = max(res, dist[i]);
        }
        if(res == INT_MAX) return -1; // return res == INT_MAX ? -1 : res;
        return res;
    }
};

Kruskal's Algorithm for MST

class DSU {
    vector<int> par;
    public:
        DSU(int n) {
            par = vector<int>(n, -1);
        }

        int findParent(int x) {
            if(par[x] == -1) return x;
            return findParent(par[x]);
        }

        bool unit(int x, int y) {
            int parX = findParent(x), parY = findParent(y);
            if(parX == parY) return false;

            par[parY] = parX;
            return true;
        }
};

class Solution {
public:
    int dist(vector<int>& a, vector<int>& b){
        return abs(a[0]-b[0]) + abs(a[1]-b[1]);
    }

    int minCostConnectPoints(vector<vector<int>>& points) {
        vector<vector<int>> edges;
        int n = points.size();
        int res = 0;
        DSU dsuObj(n);

        for(int i=0 ; i<n ; i++){
            for(int j=i+1 ; j<n ; j++){
                edges.push_back({i,j, dist(points[i],points[j])});
            }
        }

        sort(edges.begin(),edges.end(),[](const vector<int>& v1, const vector<int>& v2) -> bool{
            return v1[2]<v2[2];
        });

        for(int i=0;i<edges.size();i++){
            int u = edges[i][0], v = edges[i][1], w = edges[i][2];
            if(dsuObj.unit(u,v)){
                res += w;
            }
        }

        return res;
    }
};
// Replace O with X
bool isPossible(int i, int j, int n, int m)
    {
        return i>=0 && i<n && j>=0 && j<m;
    }
    void bfs(int i, int j, vector<vector<char>> &mat, vector<vector<bool>> &visited, vector<pair<int,int>> &dir, int n, int m){
        queue<pair<int,int>> q;
        q.push({i,j});
        visited[i][j] = true;
        while(!q.empty()){
            int i = q.front().first;
            int j = q.front().second;
            q.pop();
            for(int k=0;k<4;k++){
                int newI = i+dir[k].first;
                int newJ = j+dir[k].second;
                if(isPossible(newI,newJ,n,m) && !visited[newI][newJ] && mat[newI][newJ] == 'O'){
                    q.push({newI,newJ});
                    visited[newI][newJ] = true;
                }
            }
        }
    }
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        vector<vector<bool>> visited(n, vector<bool>(m,false));
        vector<pair<int,int>> dir = {{1,0},{0,1},{-1,0},{0,-1}};
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((i==0 || i== n-1 || j==0 || j==m-1) && !visited[i][j] && mat[i][j] == 'O'){
                    bfs(i,j,mat,visited,dir,n,m);
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && mat[i][j] == 'O'){
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
        
    }

// https://leetcode.com/problems/course-schedule-ii
// Topological Sorting

    class Solution {
public:
    bool dfs(int curr, int n, vector<vector<int>>& graph, vector<bool>& visited, vector<bool>& visiting, vector<int>& res) {
        visiting[curr] = true;

        for(int neighbor : graph[curr]) {
            if(visiting[neighbor])
                return false;
            if(!visited[neighbor]) {
                if(!dfs(neighbor, n, graph, visited, visiting, res))
                    return false;
            }
        }

        visited[curr] = true;
        visiting[curr] = false;
        res.push_back(curr);
        return true;
    }

    vector<int> findOrder(int n, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(n);
        for(auto prerequisite : prerequisites) 
            graph[prerequisite[0]].push_back(prerequisite[1]);

        vector<bool> visited(n, false);
        vector<bool> visiting(n, false);
        vector<int> res;

        for(int i = 0; i<n; i++) {
            if(!visited[i]) {
                if(!dfs(i, n, graph, visited, visiting, res))
                    return {};
            }
        }
        return res;
    }
};