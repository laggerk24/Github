class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        
         for(int i=1; i<n; i++){
            for(auto edge: times){
                int u = edge[0];
                int v = edge[1];
                int w = edge[2];
                
                if(dist[u]!=INT_MAX and dist[u] + w < dist[v])
                    dist[v] = dist[u] + w;
            }
         }
        int res = -1;
        for(int i=1; i<=n; i++){
            res = max(res, dist[i]);
        }
        return res == INT_MAX ? -1 : res;
    }
};


// Solution 2 - Dijkstra Algo - Priority Queue
// Time Complexity - O(V + ElogV)

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> graph(n+1, vector<pair<int,int>>());

        for(auto time : times)
            graph[time[0]].push_back({time[1], time[2]});

        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;

        pq.push({0, k});

        while(!pq.empty()) {
            int node = pq.top().second;
            int nodedist = pq.top().first;
            pq.pop();

            for(auto neighbor : graph[node]) {
                int adjnode = neighbor.first;
                int adjnodedist = neighbor.second;

                if(dist[adjnode] > nodedist + adjnodedist) {
                    dist[adjnode] = nodedist + adjnodedist;
                    pq.push({dist[adjnode], adjnode});
                }
            }
        }

        int res = -1;
        for(int i = 1; i<=n; i++) {
            res = max(res, dist[i]);
        }
        if(res == INT_MAX) return -1; // return res == INT_MAX ? -1 : res;
        return res;
    }
};

Kruskal's Algorithm for MST

class DSU {
    vector<int> par;
    public:
        DSU(int n) {
            par = vector<int>(n, -1);
        }

        int findParent(int x) {
            if(par[x] == -1) return x;
            return findParent(par[x]);
        }

        bool unit(int x, int y) {
            int parX = findParent(x), parY = findParent(y);
            if(parX == parY) return false;

            par[parY] = parX;
            return true;
        }
};

class Solution {
public:
    int dist(vector<int>& a, vector<int>& b){
        return abs(a[0]-b[0]) + abs(a[1]-b[1]);
    }

    int minCostConnectPoints(vector<vector<int>>& points) {
        vector<vector<int>> edges;
        int n = points.size();
        int res = 0;
        DSU dsuObj(n);

        for(int i=0 ; i<n ; i++){
            for(int j=i+1 ; j<n ; j++){
                edges.push_back({i,j, dist(points[i],points[j])});
            }
        }

        sort(edges.begin(),edges.end(),[](const vector<int>& v1, const vector<int>& v2) -> bool{
            return v1[2]<v2[2];
        });

        for(int i=0;i<edges.size();i++){
            int u = edges[i][0], v = edges[i][1], w = edges[i][2];
            if(dsuObj.unit(u,v)){
                res += w;
            }
        }

        return res;
    }
};